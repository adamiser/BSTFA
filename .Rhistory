apply(Lamvals,2,quantile,probs=c(0.025,0.5,0.975))
n=77
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
t(Fvals) %*% t(t(Lamvals))
Fvals = out$PFmat[,c(t,t*2,t*3)]
Lamvals = out$Lambda[,c(f*n,(f*n)+1,(f*n)+2)]
apply(Lamvals,2,quantile,probs=c(0.025,0.5,0.975))
# Want the 1050 time point for location n
t=1055
n=20
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
t(Fvals) %*% t(t(Lamvals))
Fvals = out$PFmat[,c(t,t*2,t*3)]
Lamvals = out$Lambda[,c((f*n)-2,(f*n)-1,f*n)]
apply(Lamvals,2,quantile,probs=c(0.025,0.5,0.975))
utahDataList$Locations[78]
# Want the 1050 time point for location n
t=1055
n=20
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
t(Fvals) %*% t(t(Lamvals))
Fvals = out$PFmat[,c(t,t*2,t*3)]
Lamvals = out$Lambda[,c((f*n)-2,(f*n)-1,f*n)]
apply(Lamvals,2,quantile,probs=c(0.025,0.5,0.975))
n=77
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
t(Fvals) %*% t(t(Lamvals))
Fvals = out$PFmat[,c(t,t*2,t*3)]
Lamvals = out$Lambda[,c((f*n)-2,(f*n)-1,f*n)]
apply(Lamvals,2,quantile,probs=c(0.025,0.5,0.975))
n=20
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
t(Fvals) %*% t(t(Lamvals))
Fvals = out$PFmat[,c(t,t*2,t*3)]
Lamvals = out$Lambda[,c((f*n)-2,(f*n)-1,f*n)]
apply(Lamvals,2,quantile,probs=c(0.025,0.5,0.975))
Lamvals
# Want the 1050 time point for location n
t=1055
n=20
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
Lamvals
# Want the 1050 time point for location n
t=1055
n=78
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
Lamvals
# Want the 1050 time point for location n
t=1055
n=77
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
Lamvals
n=77
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
Lamvals
t(Fvals) %*% t(t(Lamvals))
utahDataList$Locations[20]
utahDataList$Locations
n=137
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
Lamvals
n=146
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
Lamvals
n=1
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
Lamvals
colnames(utahDataList$TemperatureVals) = utahDataList$Locations
par(mfrow=c(1,3))
window=1050:1090
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')],
x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='CANYONLANDS.THE.NECK')],
x=utahDataList$Dates[window], type = 'l',
main = "Canyonlands",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
plot(y=utahDataList$TemperatureVals[window,utahDataList$Locations=='LOGAN.UTAH.ST.UNIV'],
x=utahDataList$Dates[window], type = 'l',
main = "Logan",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
colnames(utahDataList$TemperatureVals) = utahDataList$Locations
par(mfrow=c(1,3))
window=1050:1090
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')],
x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='CANYONLANDS.THE.NECK')],
x=utahDataList$Dates[window], type = 'l',
main = "Canyonlands",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
plot(y=utahDataList$TemperatureVals[window,utahDataList$Locations=='LOGAN.UTAH.ST.UNIV'],
x=utahDataList$Dates[window], type = 'l',
main = "Logan",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
devtools::load_all()
out = BSTFA(utahDataList$TemperatureVals,
utahDataList$Dates,
utahDataList$Coords,
factors.fixed = c(144,89,129,78),
iters=1000,
verbose=TRUE,
save.output=FALSE)
# Want the 1050 time point for location n
t=1055
n=1
f=3
PFmat.mean = apply(out$PFmat,2,mean) # TL x 1
Lambda.mean = apply(out$Lambda,2,mean) # Ln x 1
# Want the 1050 time point for location n
t=1055
n=1
f=3
Fvals = PFmat.mean[c(t,t*2,t*3)]
Lamvals = Lambda.mean[c((f*n)-2,(f*n)-1,f*n)]
Lamvals
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
# Want the 1050 time point for location n
t=1055
n=1
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
# Want the t time point for location n
t=1055
n=1
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
utahDataList$Locations[89]
utahDataList$Locations[78]
utahDataList$Locations
n=17
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
n=20
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
n=78
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
n=20
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
length(Lambda.mean)
Lambda.mean[seq(2,584,by=4)]
seq(2,584,by=4)
Lambda.mean[seq(2,584,by=4)]
which.max(seq(2,584,by=4))
Lambda.mean[146]
which.max(Lambda.mean[seq(2,584,by=4)])
n=89
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
order(Lambda.mean[seq(2,584,by=4)])
n=135
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
utahDataList$Locations
# Want the t time point for location n
# 1 - Wendover
# 2 - Moab
# 3 - St. George
# 4 - Logan/USU
t=1055
n=135
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
t(Fvals) %*% t(t(Lamvals))
utahDataList$Locations[135]
n=78
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
t(Fvals) %*% t(t(Lamvals))
n=77
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
t(Fvals) %*% t(t(Lamvals))
n=17
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
t(Fvals) %*% t(t(Lamvals))
n=1
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
t(Fvals) %*% t(t(Lamvals))
Fvals = out$PFmat[,c(t,t*2,t*3,t*4)]
Lamvals = out$Lambda[,c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,probs=c(0.025,0.5,0.975))
# Want the t time point for location n
# 1 - Wendover
# 2 - Moab
# 3 - St. George
# 4 - Logan/USU
t=1055
n=1
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
# Want the t time point for location n
# 1 - Wendover
# 2 - Moab
# 3 - St. George
# 4 - Logan/USU
t=1055
n=1
f=4
Fvals = PFmat.mean[c(t,t*2,t*3,t*4)]
Lamvals = Lambda.mean[c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
Lamvals
Fvals = out$PFmat[,c(t,t*2,t*3,t*4)]
Lamvals = out$Lambda[,c((f*n)-3,(f*n)-2,(f*n)-1, f*n)]
apply(Lamvals,2,quantile,probs=c(0.025,0.5,0.975))
utahDataList$Coords
n=1
location = utahDataList$Coords[n,]
m.fft.lon <- sapply(1:(out$n.spatial.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,1])/out$freq.lon)
cos_term <- cos(2 * pi * k * (location[,1])/out$freq.lon)
cbind(sin_term, cos_term)
})
m.fft.lat <- sapply(1:(out$n.spatial.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,2])/out$freq.lat)
cos_term <- cos(2 * pi * k * (location[,2])/out$freq.lat)
cbind(sin_term, cos_term)
})
Slon <- cbind(m.fft.lon[1:nrow(location),], m.fft.lon[(nrow(location)+1):(2*nrow(location)),])
Slat <- cbind(m.fft.lat[1:nrow(location),], m.fft.lat[(nrow(location)+1):(2*nrow(location)),])
predS = matrix(Slat*Slon,ncol=out$n.spatial.bases)
predS = matrix(Slat*Slon,ncol=out$n.spatial.bases)
out$model.matrices$QS
QS = out$model.matrices$QS[n,]
QS
out$alphaS
dim(out$alphaS)
dim(QS)
length(QS)
out$alphaS
nrow(out$alphaS)
n=1
f=4
QS = out$model.matrices$QS[n,]
dim(out$alphaS)
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
dim(Lamvals)
i=1
matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
n=1
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
n=1
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
Lamvals
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
n=1
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
mean(Lamvals[,3] > Lamvals[,4])
mean(Lamvals[,2] > Lamvals[,4])
mean(Lamvals[,1] > Lamvals[,4])
mean(Lamvals[,2] > Lamvals[,3])
mean(Lamvals[,1] > Lamvals[,3])
n=20
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
mean(Lamvals[,1] > Lamvals[,3])
apply(Lamvals,2,mean)
n=17
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
n=135
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
utahDateList$Locations
utahDataList$Locations
n=114
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
n=17
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
utahDataList$Locations[17]
utahDataList$Locations
n=75
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
plot.map(out,parameter='loading',loading = 2,state=TRUE,map=TRUE,location='utah')
utahDataList$Locations
n=139
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
mean(Lamvals[,1] > Lamvals[,3])
n=138
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
mean(Lamvals[,1] > Lamvals[,3])
n=130
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
utahDataList$Locations
n=127
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
apply(Lamvals,2,mean)
for (nn in 1:146) {
n=nn
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
print(nn)
print(apply(Lamvals,2,mean))
}
plot.map(out,parameter='loading',loading = 4,state=TRUE,map=TRUE,location='utah')
nn=48
n=nn
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
print(nn)
print(apply(Lamvals,2,mean))
utahDataList$Locations[nn]
utahDataList$Locations
nn=24
n=nn
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
print(nn)
print(apply(Lamvals,2,mean))
n=48
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
print(nn)
print(apply(Lamvals,2,mean))
# print(nn)
print(apply(Lamvals,2,mean))
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
n=20
f=4
QS = out$model.matrices$QS[n,]
Lamvals = matrix(0,nrow=nrow(out$alphaS),ncol=f)
for (i in 1:nrow(out$alphaS)) {
Lamvals[i,] = QS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
# print(nn)
print(apply(Lamvals,2,mean))
apply(Lamvals,2,quantile,prob=c(0.025,0.975))
plot.factor(out,together=TRUE)
devtools::load_all()
plot.factor(out,together=TRUE)
plot.factor(out,together=TRUE)
devtools::load_all()
plot.factor(out,together=TRUE)
plot.factor(out,together=TRUE)
devtools::load_all()
plot.factor(out,together=TRUE)
devtools::load_all()
plot.factor(out,together=TRUE)
plot.factor(out,together=TRUE)
plot.factor(out,together=TRUE)
devtools::load_all()
