dim(ximean)
xilong = kronecker(Matrix::Diagonal(nrow(location)),
out$model.matrices$seasonal.bs.basis)%*%xipred
out$n.seasn.knots
out$tau2.xi
xiresid <- matrix(rnorm(nrow(location)*out$n.seasn.knots*out$draws,
mean=rep(0,nrow(location)*out$n.seasn.knots$out$draws),
sd=sqrt(rep(c(out$tau2.xi),each=nrow(location)*out$n.seasn.knots))),ncol=out$draws,byrow=TRUE)
xiresid <- matrix(rnorm(nrow(location)*out$n.seasn.knots*out$draws,
mean=rep(0,nrow(location)*out$n.seasn.knots*out$draws),
sd=sqrt(rep(c(out$tau2.xi),each=nrow(location)*out$n.seasn.knots))),ncol=out$draws,byrow=TRUE)
xiresid
dim(xiresid)
predS.xi = as(kronecker(predS, diag(out$n.seasn.knots)), "sparseMatrix")
ximean <- predS.xi%*%t(out$alpha.xi)
xiresid <- matrix(rnorm(nrow(location)*out$n.seasn.knots*out$draws,
mean=rep(0,nrow(location)*out$n.seasn.knots*out$draws),
sd=sqrt(rep(c(out$tau2.xi),each=nrow(location)*out$n.seasn.knots))),ncol=out$draws,byrow=TRUE)
xipred <- ximean + xiresid
xilong = kronecker(Matrix::Diagonal(nrow(location)),
out$model.matrices$seasonal.bs.basis)%*%xipred
mean(xipred)
mean(ximean)
out$tau2.mu
muresid = matrix(rnorm(nrow(location)*out$draws,
mean=rep(0,nrow(location)*out$draws),
sd=sqrt(rep(c(out$tau2.mu),each=nrow(location)))),ncol=out$draws,byrow=TRUE)
muresid
m.fft.lon <- sapply(1:(out$n.load.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,1])/out$freq.lon)
cos_term <- cos(2 * pi * k * (location[,1])/out$freq.lon)
cbind(sin_term, cos_term)
})
m.fft.lat <- sapply(1:(out$n.load.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,2])/out$freq.lat)
cos_term <- cos(2 * pi * k * (location[,2])/out$freq.lat)
cbind(sin_term, cos_term)
})
Slon <- cbind(m.fft.lon[1:nrow(location),], m.fft.lon[(nrow(location)+1):(2*nrow(location)),])
Slat <- cbind(m.fft.lat[1:nrow(location),], m.fft.lat[(nrow(location)+1):(2*nrow(location)),])
predQS = matrix(Slat*Slon,ncol=out$n.load.bases)
Lam = array(dim=c(nrow(predQS),out$n.factors,out$draws))
for (i in 1:out$draws) {
Lam[,,i] = predQS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
dim(Lam)
dim(predQS)
matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
Lammean = predQS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
dim(Lammean)
out$tau2.lambda
dim(out$tau2.lambda)
i=1
out$tau2.lambda[i,]
Lamresid = matrix(rnorm(nrow(location)*out$n.factors,
mean=rep(0,nrow(location)*out$n.factors),
sd=sqrt(rep(c(out$tau2.lambda[i,]),each=out$n.factors))),ncol=out$n.factors,byrow=TRUE)
Lamresid
sqrt(rep(c(out$tau2.lambda[i,]),each=out$n.factors))
out$tau2.lambda[1,]
sqrt(.045)
Lam = array(dim=c(nrow(predQS),out$n.factors,out$draws))
for (i in 1:out$draws) {
Lammean = predQS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
Lamresid = matrix(rnorm(nrow(location)*out$n.factors,
mean=rep(0,nrow(location)*out$n.factors),
sd=sqrt(rep(c(out$tau2.lambda[i,]),each=out$n.factors))),ncol=out$n.factors,byrow=TRUE)
Lam[,,i] = Lammean + Lamresid
}
Lam
facts = array(dim=c(out$n.times,nrow(location),out$draws))
for (i in 1:out$draws) {
facts[,,i] = matrix(out$PFmat[i,],nrow=out$n.times,ncol=out$n.factors)%*%matrix(t(Lam[,,i]),nrow=out$n.factors,ncol=nrow(location))
}
resid = matrix(rnorm(out$draws*out$n.times,
mean=rep(0,out$draws*out$n.times),
sd=sqrt(rep(c(out$sig2),each=out$n.times))),ncol=out$draws,byrow=TRUE)
ypreds = mulong + betalong + xilong + matrix(facts, nrow=out$n.times*nrow(location), ncol=out$draws) + resid
### Mu
mumean <- predS%*%t(out$alpha.mu)
muresid = matrix(rnorm(nrow(location)*out$draws,
mean=rep(0,nrow(location)*out$draws),
sd=sqrt(rep(c(out$tau2.mu),each=nrow(location)))),ncol=out$draws,byrow=TRUE)
mupred <- mumean + muresid
mulong = kronecker(Matrix::Diagonal(nrow(location)),
rep(1,out$n.times))%*%mupred
### Beta (linear slope)
betamean = predS%*%t(out$alpha.beta)
betaresid = matrix(rnorm(nrow(location)*out$draws,
mean=rep(0,nrow(location)*out$draws),
sd=sqrt(rep(c(out$tau2.beta),each=nrow(location)))),ncol=out$draws,byrow=TRUE)
betapred <- betamean + betaresid
betalong = kronecker(Matrix::Diagonal(nrow(location)),
out$model.matrices$linear.Tsub)%*%betapred
### Xi (seasonal)
predS.xi = as(kronecker(predS, diag(out$n.seasn.knots)), "sparseMatrix")
ximean <- predS.xi%*%t(out$alpha.xi)
xiresid <- matrix(rnorm(nrow(location)*out$n.seasn.knots*out$draws,
mean=rep(0,nrow(location)*out$n.seasn.knots*out$draws),
sd=sqrt(rep(c(out$tau2.xi),each=nrow(location)*out$n.seasn.knots))),ncol=out$draws,byrow=TRUE)
xipred <- ximean + xiresid
xilong = kronecker(Matrix::Diagonal(nrow(location)),
out$model.matrices$seasonal.bs.basis)%*%xipred
### Factor Analysis
if (out$load.style == 'grid') {
predQS <- NULL
for(kk in 1:length(out$knots.load)) {
bspred <- bisquare2d(as.matrix(location), as.matrix(out$knots.load[[kk]]))
predQS <- cbind(predS, bspred)
}
}
if (out$load.style == 'fourier') {
m.fft.lon <- sapply(1:(out$n.load.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,1])/out$freq.lon)
cos_term <- cos(2 * pi * k * (location[,1])/out$freq.lon)
cbind(sin_term, cos_term)
})
m.fft.lat <- sapply(1:(out$n.load.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,2])/out$freq.lat)
cos_term <- cos(2 * pi * k * (location[,2])/out$freq.lat)
cbind(sin_term, cos_term)
})
Slon <- cbind(m.fft.lon[1:nrow(location),], m.fft.lon[(nrow(location)+1):(2*nrow(location)),])
Slat <- cbind(m.fft.lat[1:nrow(location),], m.fft.lat[(nrow(location)+1):(2*nrow(location)),])
predQS = matrix(Slat*Slon,ncol=out$n.load.bases)
}
if (out$load.style == 'tps') {
coords_added = rbind(out$coords,location)
predQS = matrix(npreg::basis.tps(coords_added, knots=out$knots.load, rk=TRUE)[-(1:nrow(out$coords)),-(1:2)],ncol=out$n.load.bases)
}
# Lambda (loadings)
Lam = array(dim=c(nrow(predQS),out$n.factors,out$draws))
for (i in 1:out$draws) {
Lammean = predQS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
Lamresid = matrix(rnorm(nrow(location)*out$n.factors,
mean=rep(0,nrow(location)*out$n.factors),
sd=sqrt(rep(c(out$tau2.lambda[i,]),each=out$n.factors))),ncol=out$n.factors,byrow=TRUE)
Lam[,,i] = Lammean + Lamresid
}
# F (factor scores)
facts = array(dim=c(out$n.times,nrow(location),out$draws))
for (i in 1:out$draws) {
facts[,,i] = matrix(out$PFmat[i,],nrow=out$n.times,ncol=out$n.factors)%*%matrix(t(Lam[,,i]),nrow=out$n.factors,ncol=nrow(location))
}
resid = matrix(rnorm(out$draws*out$n.times,
mean=rep(0,out$draws*out$n.times),
sd=sqrt(rep(c(out$sig2),each=out$n.times))),ncol=out$draws,byrow=TRUE)
ypreds = mulong + betalong + xilong + matrix(facts, nrow=out$n.times*nrow(location), ncol=out$draws) + resid
ypreds
dim(ypreds)
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one',add=T)
plot.annual(out,location=1,interval=0.95,years='one')
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one',add=T)
predS.xi = as(kronecker(predS, diag(out$n.seasn.knots)), "sparseMatrix")
xi.pred <- predS.xi%*%t(out$alpha.xi)
ann.pred <- bs.basis%*%xi.pred
y = out$y
x_set = out$doy
dates.pred <- seq(as.Date(out$dates[1]), as.Date(out$dates[length(out$dates)]), by=1)
doy.pred <- as.numeric(strftime(dates.pred, format="%j"))
knots <- seq(1, 366, length=out$n.seasn.knots+1)
bs.basis <- mgcv::cSplineDes(doy.pred, knots)
dim(bs.basis)
length(doy.pred)
dim(bs.basis)
dim(xi.pred)
dim(ximean)
predS.xi = as(kronecker(predS, diag(out$n.seasn.knots)), "sparseMatrix")
ximean <- predS.xi%*%t(out$alpha.xi)
xiresid <- matrix(rnorm(nrow(location)*out$n.seasn.knots*out$draws,
mean=rep(0,nrow(location)*out$n.seasn.knots*out$draws),
sd=sqrt(rep(c(out$tau2.xi),each=nrow(location)*out$n.seasn.knots))),ncol=out$draws,byrow=TRUE)
xiresid
xi.pred <- ximean + xiresid
ann.pred <- bs.basis%*%xi.pred
ann.pred.mean <- apply(ann.pred, 1, mean)
devtools::load_all()
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one',add=T)
plot.annual(out,location=1,interval=0.95,years='one')
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = TRUE)
parameter='slope'
yearscale=TRUE
fine=100
color.gradient=colorRampPalette(rev(RColorBrewer::brewer.pal(9, name='RdBu')))(fine)
state='utah'
map=TRUE
if (map) {
if (!state) {
map_data_loc <- ggplot2::map_data('world')[ggplot2::map_data('world')$region == location,]
full_map <- ggplot2::map_data('world')
}
if (state) {
map_data_loc <- ggplot2::map_data('state')[ggplot2::map_data('state')$region == location,]
full_map = ggplot2::map_data('state')
}
predloc <- expand.grid(seq(min(map_data_loc[,1]),
max(map_data_loc[,1]), length=fine),
seq(min(map_data_loc[,2]),
max(map_data_loc[,2]), length=fine))
} else {
predloc <- expand.grid(seq(min(out$coords[,1]),
max(out$coords[,1]), length=fine),
seq(min(out$coords[,2]),
max(out$coords[,2]), length=fine))
}
state='Utah'
if (map) {
if (!state) {
map_data_loc <- ggplot2::map_data('world')[ggplot2::map_data('world')$region == location,]
full_map <- ggplot2::map_data('world')
}
if (state) {
map_data_loc <- ggplot2::map_data('state')[ggplot2::map_data('state')$region == location,]
full_map = ggplot2::map_data('state')
}
predloc <- expand.grid(seq(min(map_data_loc[,1]),
max(map_data_loc[,1]), length=fine),
seq(min(map_data_loc[,2]),
max(map_data_loc[,2]), length=fine))
} else {
predloc <- expand.grid(seq(min(out$coords[,1]),
max(out$coords[,1]), length=fine),
seq(min(out$coords[,2]),
max(out$coords[,2]), length=fine))
}
state
location='utah'
state=TRUE
if (map) {
if (!state) {
map_data_loc <- ggplot2::map_data('world')[ggplot2::map_data('world')$region == location,]
full_map <- ggplot2::map_data('world')
}
if (state) {
map_data_loc <- ggplot2::map_data('state')[ggplot2::map_data('state')$region == location,]
full_map = ggplot2::map_data('state')
}
predloc <- expand.grid(seq(min(map_data_loc[,1]),
max(map_data_loc[,1]), length=fine),
seq(min(map_data_loc[,2]),
max(map_data_loc[,2]), length=fine))
} else {
predloc <- expand.grid(seq(min(out$coords[,1]),
max(out$coords[,1]), length=fine),
seq(min(out$coords[,2]),
max(out$coords[,2]), length=fine))
}
names(predloc) <- c("Lon", "Lat")
### Original Fourier Method
m.fft.lon <- sapply(1:(out$n.spatial.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (predloc[,1])/out$freq.lon)
cos_term <- cos(2 * pi * k * (predloc[,1])/out$freq.lon)
cbind(sin_term, cos_term)
})
m.fft.lat <- sapply(1:(out$n.spatial.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (predloc[,2])/out$freq.lat)
cos_term <- cos(2 * pi * k * (predloc[,2])/out$freq.lat)
cbind(sin_term, cos_term)
})
Slon <- cbind(m.fft.lon[1:nrow(predloc),], m.fft.lon[(nrow(predloc)+1):(2*nrow(predloc)),])
Slat <- cbind(m.fft.lat[1:nrow(predloc),], m.fft.lat[(nrow(predloc)+1):(2*nrow(predloc)),])
predS = matrix(Slat*Slon,ncol=out$n.spatial.bases)
dim(predS)
predloc <- predloc[complete.cases(predS),]
predS <- predS[complete.cases(predS),]
predS%*%t(out$alpha.beta)
365.25/(out$doy[2] - out$doy[1])
pred <- predS%*%t(out$alpha.beta)*365.25/(out$doy[2] - out$doy[1])
dim(pred)
fine^2*out$draws
10000*50
sqrt(rep(c(out$tau2.beta),each=fine^2))
length(unique(sqrt(rep(c(out$tau2.beta),each=fine^2))))
betaresid = matrix(rnorm(fine^2*out$draws,
mean=rep(0,fine^2*out$draws),
sd=sqrt(rep(c(out$tau2.beta),each=fine^2))),ncol=out$draws,byrow=TRUE)
dim(betaresid)
summary(betaresid)
legend.name = 'Slope'
betamean <- predS%*%t(out$alpha.beta)
betaresid <- matrix(rnorm(fine^2*out$draws,
mean=rep(0,fine^2*out$draws),
sd=sqrt(rep(c(out$tau2.beta),each=fine^2))),ncol=out$draws,byrow=TRUE)
betapred <- betamean + betaresid
yearscale
pred
summary(pred)
summary(c(pred))
pred <- betapred*365.25/(out$doy[2] - out$doy[1])
summary(c(pred))
summary(c(betapred))
legend.name = paste('Loading', loading)
loading=1
legend.name = paste('Loading', loading)
pred <- predS%*%t(out$alphaS)[seq(loading,out$n.load.bases*out$n.factors,by=out$n.factors),]
dim(pred)
predS
### Original Fourier Method
m.fft.lon <- sapply(1:(out$n.load.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (predloc[,1])/out$freq.lon)
cos_term <- cos(2 * pi * k * (predloc[,1])/out$freq.lon)
cbind(sin_term, cos_term)
})
m.fft.lat <- sapply(1:(out$n.load.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (predloc[,2])/out$freq.lat)
cos_term <- cos(2 * pi * k * (predloc[,2])/out$freq.lat)
cbind(sin_term, cos_term)
})
Slon <- cbind(m.fft.lon[1:nrow(predloc),], m.fft.lon[(nrow(predloc)+1):(2*nrow(predloc)),])
Slat <- cbind(m.fft.lat[1:nrow(predloc),], m.fft.lat[(nrow(predloc)+1):(2*nrow(predloc)),])
predS = matrix(Slat*Slon,ncol=out$n.load.bases)
dim(predS)
out$n.load.bases
out$n.spatial.bases
seq(loading,out$n.load.bases*out$n.factors,by=out$n.factors)
t(out$alphaS)[seq(loading,out$n.load.bases*out$n.factors,by=out$n.factors),]
dim(predS)
dim(t(out$alphaS))
lamresid <- matrix(rnorm(fine^2*out$draws,
mean=rep(0,fine^2*out$draws),
sd=sqrt(rep(c(out$tau2.lambda),each=fine^2))),ncol=out$draws,byrow=TRUE)
dim(lamresid)
legend.name = paste('Loading', loading)
lammean <- predS%*%t(out$alphaS)[seq(loading,out$n.load.bases*out$n.factors,by=out$n.factors),]
lamresid <- matrix(rnorm(fine^2*out$draws,
mean=rep(0,fine^2*out$draws),
sd=sqrt(rep(c(out$tau2.lambda),each=fine^2))),ncol=out$draws,byrow=TRUE)
pred <- lammean + lamresid
dim(pred)
devtools::load_all()
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = TRUE)
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = TRUE)
devtools::load_all()
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = TRUE)
plot.location(out,1,xrange=c('1999-01-01', '2009-01-01'),truth = TRUE)
plot.location(out,1,xrange=c('1959-01-01', '1969-01-01'),truth = TRUE)
plot.location(out,1,xrange=c('1969-01-01', '1979-01-01'),truth = TRUE)
plot.grid(out,parameter='slope')
out = STFA(iters=10000,ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
factors.fixed = c(144,89,129,78), n.seasn.knots=7,
spatial.style='fourier', load.style='fourier', plot.factors = FALSE,
n.spatial.bases = 8, n.load.bases = 8,
freq.lat = 40, freq.lon = 30)
devtools::load_all()
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one',add=T)
plot.annual(out,location=1,interval=0.95,years='one')
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one',add=T)
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = TRUE)
devtools::load_all()
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = TRUE)
devtools::load_all()
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = TRUE)
plot.map(out,parameter='loading',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE, loading=1)
plot.map(out,parameter='loading',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE, loading=2)
utahDataList$Locations[89]
plot.map(out,parameter='loading',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE, loading=3)
plot.map(out,parameter='loading',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE, loading=4)
plot.map(out,parameter='loading',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE, loading=4)
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one',add=T)
plot.annual(out,location=1,interval=0.99,years='all')
plot.annual(out,location=1,interval=0.95,years='one')
plot.location(out,1,xrange=c('1969-01-01', '1979-01-01'),truth = TRUE)
plot.trace(out, parameter='beta', param.range=1:5)
devtools::load_all()
plot.map(out,parameter='loading',location='utah',state=TRUE,map=TRUE,
with.uncertainty = TRUE, loading=1)
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1,xrange=c('1969-01-01', '1979-01-01'),truth = TRUE)
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.annual(out,location=1,interval=0.95,years='one')
devtools::load_all()
devtools::load_all()
# library(BSTFA)
devtools::load_all()
utahDataList$TemperatureVals
colnames(utahDataList$TemperatureVals) = utahDataList$Locations
colnames(utahDataList$TemperatureVals) = utahDataList$Locations
par(mfrow=c(3,1))
window=1300:1350
#window=1200:1250
window=1260:1290
plot(y=utahDataList$MOAB[window], x=mydate[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
utahDataList$TemperatureVals$MOAB
utahDataList$TemperatureVals
#window=1200:1250
window=1260:1290
plot(y=utahDataList$TemperatureVals[window,utahDataList$Locations=='MOAB'], x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
utahDataList$Locations=='MOAB'
#window=1200:1250
window=1260:1290
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')], x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
which(utahDataList$Locations=='MOAB')
utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')]
typeof(utahDataList$TemperatureVals)
dim(utahDataList$TemperatureVals)
#window=1200:1250
window=1000:1200
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')], x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
#window=1200:1250
window=1030:1050
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')], x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
#window=1200:1250
window=1070:1090
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')], x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
#window=1200:1250
window=1060:1100
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')], x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
#window=1200:1250
window=1050:1095
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')], x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
#window=1200:1250
window=1060:1090
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')], x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
colnames(utahDataList$TemperatureVals) = utahDataList$Locations
par(mfrow=c(3,1))
window=1060:1090
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='MOAB')],
x=utahDataList$Dates[window], type = 'l',
main = "Moab",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
plot(y=utahDataList$TemperatureVals[window,which(utahDataList$Locations=='CANYONLANDS.THE.NECK')],
x=utahDataList$Dates[window], type = 'l',
main = "Canyonlands",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
plot(y=utahDataList$TemperatureVals[window,utahDataList$Locations=='LOGAN.UTAH.ST.UNIV'],
x=utahDataList$Dates[window], type = 'l',
main = "Logan",
xlab = "",
ylab = "",
ylim=c(-18,23),
cex.main=1.5)
