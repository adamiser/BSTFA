coords=utahDataList$Coords,
factors.fixed = c(144,89,129,78), n.seasn.knots=7,
spatial.style='tps', load.style='fourier',
n.load.bases = 8, n.spatial.bases = 12, n.temp.bases=126,
verbose=FALSE, plot.factors=FALSE)
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
out = STFA(iters=100,ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
factors.fixed = c(144,89,129,78), n.seasn.knots=7,
spatial.style='fourier', load.style='fourier',
n.load.bases = 8, n.spatial.bases = 12, n.temp.bases=126,
verbose=FALSE, plot.factors=FALSE)
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1)
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1)
plot.location(out,1,xrange=c('1959-01-01', '1979-01-01'))
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1,xrange=c('1959-01-01', '1979-01-01'))
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
out$coords
load('/Users/adamiser/Desktop/Research/TempDataForSTFA.Rdata')
utahDataList = list('TemperatureVals' = ymat.use,
'Dates' = mydate.use,
'Coords' = coords,
'Locations' = gauges.reg$Station)
Cmoonmean <- locdat.T
for(i in 1:n.locations){
Cmoonmean[,i] <- locdat.T[,i] - mean(locdat.T[,i], na.rm=T)
}
Cmoonmean.T <- Cmoonmean
missing <- which(is.na(Cmoonmean)==T)
Cmoonmean <- as.matrix(Cmoonmean)
y <- c(Cmoonmean)
doy = as.numeric(x_set)
ymat = Cmoonmean
coords = rbind(gauges.reg[,c(2,3)])
ymat.use = ymat[200:1450,]
mydate.use = mydate[200:1450]
utahDataList = list('TemperatureVals' = ymat.use,
'Dates' = mydate.use,
'Coords' = coords,
'Locations' = gauges.reg$Station)
utahDataList$Locations
utahDataList$Coords
usethis::use_data(utahDataList,overwrite=TRUE)
devtools::load_all()
utahDataList$Locations
out = STFA(iters=100,ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
factors.fixed = c(144,89,129,78), n.seasn.knots=7,
spatial.style='fourier', load.style='fourier', plot.factors = FALSE,
n.spatial.bases = 8, n.load.bases = 8,
freq.lat = 40, freq.lon = 30)
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1,xrange=c('1959-01-01', '1979-01-01'))
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1,xrange=c('1959-01-01', '1979-01-01'))
par(mfrow=c(1,1))
plot.location(out,1,xrange=c('1959-01-01', '1979-01-01'))
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1,xrange=c('1959-01-01', '1979-01-01'))
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1,xrange=c('1959-01-01', '1979-01-01'))
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
predictSTFA(out,1) - predictSTFA(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06)
)
predictSTFA(out,1) - predictSTFA(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06))
devtools::load_all()
plot.grid(out)
plot.grid(out,parameter='slope')
devtools::load_all()
plot.grid(out,parameter='slope')
plot.grid(out,parameter='slope')
devtools::load_all()
plot.grid(out,parameter='slope')
devtools::load_all()
plot.grid(out,parameter='slope')
plot.grid(out,parameter='slope')
x = rnorm(100)
vals = rnorm(100)
max_value = max(abs(min(vals)),abs(max(vals)))
max_value
min_value = -max_value
min_value
?scale_colour_gradientn
devtools::load_all()
plot.grid(out,parameter='slope')
plot.grid(out,parameter='slope')
plot.grid(out,parameter='loading')
plot.grid(out,parameter='loadings')
plot.grid(out,parameter='loadings',loadings=2)
plot.grid(out,parameter='loadings',loadings=3)
plot.grid(out,parameter='loadings',loadings=4)
plot.grid(out,parameter='loadings',loadings=3)
plot.grid(out,parameter='loadings',loadings=2)
plot.grid(out,parameter='loadings',loadings=1)
plot.grid(out,parameter='slope')
devtools::load_all()
plot.map(out,parameter='slope')
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE)
plot.map(out,parameter='slope',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE)
plot.map(out,parameter='loading',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE)
plot.map(out,parameter='loading',location='utah',state=TRUE,map=TRUE,
with.uncertainty = FALSE, loading=2)
plot.factor(out)
plot.factor(out, factor=2)
plot.factor(out, factor=3)
plot.factor(out, factor=4)
plot.factor(out, factor=4, together=TRUE)
out$n.loca / 20
out$n.locs / 20
... = 2
...
x = function(...) {
...$val = 2
}
x(2)
out$dates
length(out$dates)
out$dates[length(out$dates)]
out$dates[1]
dates.pred <- seq(as.Date(out$dates[1]), as.Date(out$dates[length(out$dates)]), by=1)
doy.pred <- as.numeric(strftime(dates.pred, format="%j"))
doy.pred
knots <- seq(1, 366, length=out$n.seasn.knots+1)
knots <- seq(1, 366, length=out$n.seasn.knots+1)
bs.basis <- mgcv::cSplineDes(doy.pred, knots)
dim(bs.basis)
out$n.seasn.knots
dates.pred <- seq(as.Date("2001-01-01"), as.Date("2001-12-31"), by=1)
doy.pred <- as.numeric(strftime(dates.pred, format="%j"))
months.plot <- seq(as.Date("2001-01-01"), as.Date("2001-12-31"), by="month")
at.doy.plot <- as.numeric(strftime(months.plot, format="%j"))
months.plot <- months(months.plot, abbreviate=T)
months.plot
location-1
location=1
length(location)
loc.seq <- ((location-1)*out$n.seasn.knots + 1):(location*out$n.seasn.knots)
loc.seq
out$xi
xi.pred <- out$xi[,loc.seq]
dim(xi.pred)
ann.pred <- bs.basis%*%t(xi.pred)
ann.pred.mean <- apply(ann.pred, 1, mean)
ann.pred.mean
ann.pred.bounds <- apply(ann.pred, 1, quantile, probs=c((1-interval)/2, (1+interval)/2))
interval=0.95
ann.pred.bounds <- apply(ann.pred, 1, quantile, probs=c((1-interval)/2, (1+interval)/2))
ann.pred.bounds
dates.pred <- seq(as.Date("2001-01-01"), as.Date("2001-12-31"), by=1)
doy.pred <- as.numeric(strftime(dates.pred, format="%j"))
doy.pred
devtools::load_all()
plot.annual(out)
plot.annual(out,location=1)
plot.annual(out,location=1,interval=0.4)
plot.annual(out,location=1,interval=0.99)
plot.annual(out,location=1,interval=0.99,years='all')
y = out$y
x_set = out$doy
dates.pred <- seq(as.Date(out$dates[1]), as.Date(out$dates[length(out$dates)]), by=1)
doy.pred <- as.numeric(strftime(dates.pred, format="%j"))
knots <- seq(1, 366, length=out$n.seasn.knots+1)
bs.basis <- mgcv::cSplineDes(doy.pred, knots)
loc.seq <- ((location-1)*out$n.seasn.knots + 1):(location*out$n.seasn.knots)
xi.pred <- out$xi[,loc.seq]
ann.pred <- bs.basis%*%t(xi.pred)
ann.pred.mean <- apply(ann.pred, 1, mean)
dim(ann.pred.mean)
length(ann.pred.mean)
length(y)>0
y.this <- out$y[((location-1)*out$n.times +1):(location*out$n.times)]
y.this
length(y.this)
is.null(yrange)==T
yrange
yrange=NULL
is.null(yrange)==T
ylims <- range(c(ann.pred.mean, ann.pred.bounds, y.this), na.rm=T)
ylims
dates.pred
ann.pred.mean
plot(dates.pred, ann.pred.mean, lwd=1.5, type='l', xlab="Date", ylab="Annual Seasonal Cycle", ylim=ylims, main=paste("Location", location))
polygon(c(dates.pred, rev(dates.pred)), c(ann.pred.bounds[1,], rev(ann.pred.bounds[2,])), col=rgb(.5, .5, .5, .4), border=NA)
lines(dates.pred, ann.pred.mean, lwd=1.5)
dates.data <- as.Date(names(x_set))
points(dates.data, y.this, col=rgb(.5, .5, .5, .25))
dates.data
names(x_set)
out$dates
dates.data <- as.Date(out$dates)
points(dates.data, y.this, col=rgb(.5, .5, .5, .25))
devtools::load_all()
plot.annual(out,location=1,interval=0.99,years='all')
plot.annual(out,location=1,interval=0.99,years='one')
location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06)
out$spatial.style
m.fft.lon <- sapply(1:(out$n.spatial.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,1])/out$freq.lon)
cos_term <- cos(2 * pi * k * (location[,1])/out$freq.lon)
cbind(sin_term, cos_term)
})
m.fft.lat <- sapply(1:(out$n.spatial.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,2])/out$freq.lat)
cos_term <- cos(2 * pi * k * (location[,2])/out$freq.lat)
cbind(sin_term, cos_term)
})
Slon <- cbind(m.fft.lon[1:nrow(location),], m.fft.lon[(nrow(location)+1):(2*nrow(location)),])
Slat <- cbind(m.fft.lat[1:nrow(location),], m.fft.lat[(nrow(location)+1):(2*nrow(location)),])
predS = matrix(Slat*Slon,ncol=out$n.spatial.bases)
dim(predS)
out$alpha.xi
dim(out$alpha.xi)
predS.xi = as(kronecker(predS, diag(out$n.seasn.knots)), "sparseMatrix")
dim(predS.xi)
predS.xi%*%t(out$alpha.xi)
xi.pred <- predS.xi%*%t(out$alpha.xi)
ann.pred <- bs.basis%*%t(xi.pred)
dim(xi.pred)
dim(bs.basis)
loc.seq <- ((location-1)*out$n.seasn.knots + 1):(location*out$n.seasn.knots)
loc.seq=c(1:7)
out$xi[,loc.seq]
xi.pred <- out$xi[,loc.seq]
dim(bs.basis)
t(xi.pred)
dim(t(xi.pred))
dim(xi.pred)
predS.xi = as(kronecker(predS, diag(out$n.seasn.knots)), "sparseMatrix")
xi.pred <- predS.xi%*%t(out$alpha.xi)
dim(xi.pred)
ann.pred <- bs.basis%*%xi.pred
ann.pred.mean <- apply(ann.pred, 1, mean)
ann.pred.mean
y.this <- out$y[((location-1)*out$n.times +1):(location*out$n.times)]
ylims <- range(c(ann.pred.mean, ann.pred.bounds), na.rm=T)
ann.pred.bounds <- apply(ann.pred, 1, quantile, probs=c((1-interval)/2, (1+interval)/2))
ylims <- range(c(ann.pred.mean, ann.pred.bounds), na.rm=T)
plot(dates.pred, ann.pred.mean, lwd=1.5, type='l', xlab="Date", ylab="Annual Seasonal Cycle", ylim=ylims, main=paste("Location", location))
plot(dates.pred, ann.pred.mean, lwd=1.5, type='l', xlab="Date", ylab="Annual Seasonal Cycle", ylim=ylims, main=paste("Location", location[1], location[2]))
polygon(c(dates.pred, rev(dates.pred)), c(ann.pred.bounds[1,], rev(ann.pred.bounds[2,])), col=rgb(.5, .5, .5, .4), border=NA)
lines(dates.pred, ann.pred.mean, lwd=1.5)
devtools::load_all()
devtools::load_all()
plot.annual(out,location=1,interval=0.99,years='one')
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one')
devtools::load_all()
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one')
plot.annual(out,location=1,interval=0.95,years='one')
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one')
out$alpha.xi
dim(out$alpha.xi)
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='all')
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one')
plot.annual(out,location=1,interval=0.95,years='one')
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one')
plot.annual(out,location=1,interval=0.95,years='one')
devtools::load_all()
plot.annual(out,location=1,interval=0.95,years='one')
plot.annual(out,location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),years='one',add=T)
?STFA
devtools::load_all()
# library(BSTFA)
devtools::load_all()
out = STFA(iters=100,ymat=utahDataList$TemperatureVals,
dates=utahDataList$Dates,
coords=utahDataList$Coords,
factors.fixed = c(144,89,129,78), n.seasn.knots=7,
spatial.style='fourier', load.style='fourier', plot.factors = FALSE,
n.spatial.bases = 8, n.load.bases = 8,
freq.lat = 40, freq.lon = 30)
preds = predictSTFA(out,location=10,type='all')
dim(preds)
rnorm(10,mean=c(2,3),sd=c(1,2))
rnorm(10,mean=c(2,100),sd=c(1,2))
matrix(rnorm(10,mean=c(2,100),sd=c(1,2)),ncol=2)
matrix(rnorm(10,mean=c(2,100),sd=c(1,2)),ncol=2,byrow=FALSE)
matrix(rnorm(10,mean=c(2,100),sd=c(1,2)),ncol=2,byrow=TRUE)
out$draws
out$sig2
sqrt(3.81)
c(out$sig2)
matrix(rnorm(out$draws,mean=rep(0,out$draws),sd=sqrt(c(out$sig2))),ncol=out$draws,byrow=TRUE)
out$y
matrix(rnorm(out$draws*length(betalong),mean=rep(0,out$draws*length(betalong)),sd=sqrt(rep(c(out$sig2),each=length(betalong))),ncol=out$draws,byrow=TRUE))
betalong=rep(0,1251)
matrix(rnorm(out$draws*length(betalong),
mean=rep(0,out$draws*length(betalong)),
sd=sqrt(rep(c(out$sig2),each=length(betalong)))),ncol=out$draws,byrow=TRUE)
dim(matrix(rnorm(out$draws*length(betalong),
mean=rep(0,out$draws*length(betalong)),
sd=sqrt(rep(c(out$sig2),each=length(betalong)))),ncol=out$draws,byrow=TRUE))
matrix(rnorm(out$draws*length(betalong),
mean=rep(0,out$draws*length(betalong)),
sd=sqrt(rep(c(out$sig2),each=length(betalong)))),ncol=out$draws,byrow=TRUE)
devtools::load_all()
preds = predictSTFA(out,location=10,type='all')
preds
plot.location(out,location=10)
plot.location(out,1,xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1,xrange=c('1959-01-01', '1969-01-01'))
devtools::load_all()
plot.location(out,1,xrange=c('1959-01-01', '1969-01-01'))
devtools::load_all()
preds1 = predictSTFA(out,location=1)
preds
preds1
apply(preds1,2,mean)
preds1 = predictSTFA(out,location=1,type='all')
apply(preds1,2,mean)
preds1 = predictSTFA(out,location=1,type='ub')
preds1 = predictSTFA(out,location=1,type='ub')
apply(preds1,2,mean)
devtools::load_all()
preds1 = predictSTFA(out,location=1,type='ub')
devtools::load_all()
preds2 = predictSTFA(out,location=1,type='ub')
preds1 - preds2
devtools::load_all()
preds1 = predictSTFA(out,location=1,type='ub')
predictSTFA(out,location=1,type='ub')
#' Prediction
#' @param out output from STFA or STFAfull
#' @importFrom npreg basis.tps
#' @export predictSTFA
predictSTFA = function(out, location=NULL, type='mean',
ci.level = c(0.025, 0.975), new_x=NULL) {
# FIX ME - do useful functions like bisquare still work?
if (is.null(location)) { # predict for all observed locations
facts <- matrix(0, ncol=out$draws, nrow=out$n.times*out$n.locs)
for(i in 1:draws){
facts[,i] <- c(matrix(out$PFmat[i,],nrow=out$n.times,ncol=out$n.factors,byrow=FALSE)%*%t(matrix(out$Lambda[i,],nrow=out$n.locs,ncol=out$n.factors,byrow=TRUE)))
}
ypreds = kronecker(Matrix::Diagonal(out$n.locs), rep(1,out$n.times))%*%t(out$mu) +
kronecker(Matrix::Diagonal(out$n.locs), out$model.matrices$linear.Tsub)%*%t(out$beta) +
kronecker(Matrix::Diagonal(out$n.locs), out$model.matrices$seasonal.bs.basis)%*%t(out$xi) +
facts
} else if (is.null(dim(location))) {  # predict a specific observed location
loc.seq=c()
xi.seq=c()
lam.seq=c()
for (i in 1:length(location)) {
loc.seq <- append(loc.seq, ((location[i]-1)*out$n.times + 1):(location[i]*out$n.times))
xi.seq <- append(xi.seq, ((location[i]-1)*out$n.seasn.knots + 1):(location[i]*out$n.seasn.knots))
lam.seq <- append(lam.seq, ((location[i]-1)*out$n.factors + 1):(location[i]*out$n.factors))
}
facts <- matrix(0, ncol=out$draws, nrow=length(loc.seq))
for(i in 1:out$draws){
facts[,i] <- c(matrix(out$PFmat[i,],nrow=out$n.times,ncol=out$n.factors,byrow=FALSE)%*%t(matrix(out$Lambda[i,lam.seq],nrow=length(location),ncol=out$n.factors,byrow=TRUE)))
}
ypreds = kronecker(diag(length(location)), rep(1,out$n.times))%*%matrix(t(out$mu)[location,],nrow=length(location)) +
kronecker(diag(length(location)), out$model.matrices$linear.Tsub)%*%matrix(t(out$beta)[location,],nrow=length(location)) +
kronecker(diag(length(location)), out$model.matrices$seasonal.bs.basis)%*%t(out$xi)[xi.seq,] +
facts
} else if (length(dim(location))>1) { # predict at a new location (coordinates should have given to location)
if (out$spatial.style=='grid') {
# predS=makePredS(out,location)
predS <- NULL
for(kk in 1:length(out$knots.spatial)) {
bspred <- bisquare2d(as.matrix(location), as.matrix(out$knots.spatial[[kk]]))
predS <- cbind(predS, bspred)
}
}
if (out$spatial.style == 'fourier') {
m.fft.lon <- sapply(1:(out$n.spatial.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,1])/out$freq.lon)
cos_term <- cos(2 * pi * k * (location[,1])/out$freq.lon)
cbind(sin_term, cos_term)
})
m.fft.lat <- sapply(1:(out$n.spatial.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,2])/out$freq.lat)
cos_term <- cos(2 * pi * k * (location[,2])/out$freq.lat)
cbind(sin_term, cos_term)
})
Slon <- cbind(m.fft.lon[1:nrow(location),], m.fft.lon[(nrow(location)+1):(2*nrow(location)),])
Slat <- cbind(m.fft.lat[1:nrow(location),], m.fft.lat[(nrow(location)+1):(2*nrow(location)),])
predS = matrix(Slat*Slon,ncol=out$n.spatial.bases)
}
if (out$spatial.style == 'tps') {
coords_added = rbind(out$coords,location)
predS = matrix(npreg::basis.tps(coords_added, knots=out$knots.spatial, rk=TRUE)[-(1:nrow(out$coords)),-(1:2)],ncol=out$n.spatial.bases)
}
if (!is.null(new_x)) {
predS <- cbind(predS, new_x)
predloc <- predloc[complete.cases(predS),]
predS <- predS[complete.cases(predS),]
}
mupred <- predS%*%t(out$alpha.mu)
mulong = kronecker(Matrix::Diagonal(nrow(location)),
rep(1,out$n.times))%*%mupred
betapred <- predS%*%t(out$alpha.beta)
betalong = kronecker(Matrix::Diagonal(nrow(location)),
out$model.matrices$linear.Tsub)%*%betapred
predS.xi = as(kronecker(predS, diag(out$n.seasn.knots)), "sparseMatrix")
xipred <- predS.xi%*%t(out$alpha.xi)
xilong = kronecker(Matrix::Diagonal(nrow(location)),
out$model.matrices$seasonal.bs.basis)%*%xipred
if (out$load.style == 'grid') {
predQS <- NULL
for(kk in 1:length(out$knots.load)) {
bspred <- bisquare2d(as.matrix(location), as.matrix(out$knots.load[[kk]]))
predQS <- cbind(predS, bspred)
}
}
if (out$load.style == 'fourier') {
m.fft.lon <- sapply(1:(out$n.load.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,1])/out$freq.lon)
cos_term <- cos(2 * pi * k * (location[,1])/out$freq.lon)
cbind(sin_term, cos_term)
})
m.fft.lat <- sapply(1:(out$n.load.bases/2), function(k) {
sin_term <- sin(2 * pi * k * (location[,2])/out$freq.lat)
cos_term <- cos(2 * pi * k * (location[,2])/out$freq.lat)
cbind(sin_term, cos_term)
})
Slon <- cbind(m.fft.lon[1:nrow(location),], m.fft.lon[(nrow(location)+1):(2*nrow(location)),])
Slat <- cbind(m.fft.lat[1:nrow(location),], m.fft.lat[(nrow(location)+1):(2*nrow(location)),])
predQS = matrix(Slat*Slon,ncol=out$n.load.bases)
}
if (out$load.style == 'tps') {
coords_added = rbind(out$coords,location)
predQS = matrix(npreg::basis.tps(coords_added, knots=out$knots.load, rk=TRUE)[-(1:nrow(out$coords)),-(1:2)],ncol=out$n.load.bases)
}
Lam = array(dim=c(nrow(predQS),out$n.factors,out$draws))
for (i in 1:out$draws) {
Lam[,,i] = predQS%*%matrix(out$alphaS[i,],nrow=out$n.load.bases,ncol=out$n.factors,byrow=TRUE)
}
facts = array(dim=c(out$n.times,nrow(location),out$draws))
for (i in 1:out$draws) {
facts[,,i] = matrix(out$PFmat[i,],nrow=out$n.times,ncol=out$n.factors)%*%matrix(t(Lam[,,i]),nrow=out$n.factors,ncol=nrow(location))
}
resid = matrix(rnorm(out$draws*length(betalong),
mean=rep(0,out$draws*length(betalong)),
sd=sqrt(rep(c(out$sig2),each=length(betalong)))),ncol=out$draws,byrow=TRUE)
print(resid)
ypreds = mulong + betalong + xilong + matrix(facts, nrow=out$n.times*nrow(location), ncol=out$draws) + resid
}
if (type == 'all') ypreds.return = ypreds
if (type == 'mean') {
ypreds.return = apply(ypreds,1,mean)
}
if (type == 'median') {
ypreds.return = apply(ypreds,1,quantile,prob=c(0.5))
}
if (type == 'lb') {
ypreds.return = apply(ypreds,1,quantile,prob=ci.level[1])
}
if (type == 'ub') {
ypreds.return = apply(ypreds,1,quantile,prob=ci.level[2])
}
ypreds.return
}
preds1 = predictSTFA(out,location=1,type='ub')
preds1 = predictSTFA(out,location=1,type='ub')
plot.location(out,1,xrange=c('1959-01-01', '1969-01-01'))
devtools::load_all()
rm(list=c('predictSTFA'))
devtools::load_all()
plot.location(out,1,xrange=c('1959-01-01', '1969-01-01'))
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out,1,xrange=c('1959-01-01', '1969-01-01'))
plot.location(out,1,xrange=c('1989-01-01', '1999-01-01'))
plot.location(out,1,xrange=c('1989-01-01', '1999-01-01'),truth = TRUE)
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
out$ymat
dim(out$ymat)
out$n.times
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
devtools::load_all()
plot.location(out, location=data.frame('Longitude' = -111.96, 'Latitude' = 41.06),
uncertainty=TRUE, xrange=c('1959-01-01', '1979-01-01'))
plot.location(out,1,xrange=c('1989-01-01', '1999-01-01'),truth = TRUE)
plot.location(out,1,xrange=c('1999-01-01', '2009-01-01'),truth = TRUE)
